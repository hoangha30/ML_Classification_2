{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3197,"sourceType":"datasetVersion","datasetId":1846},{"sourceId":3884,"sourceType":"datasetVersion","datasetId":2298},{"sourceId":1419436,"sourceType":"datasetVersion","datasetId":830916}],"dockerImageVersionId":29852,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<a class=\"anchor\" id=\"0\"></a>\n# **Decision Tree Classifier Tutorial with Python**\n\n\nHello friends,\n\nIn this kernel, I build a Decision Tree Classifier to predict the safety of the car. I build two models, one with criterion `gini index` and another one with criterion `entropy`. I implement Decision Tree Classification with Python and Scikit-Learn. ","metadata":{}},{"cell_type":"markdown","source":"**As always, I hope you find this kernel useful and your <font color=\"red\"><b>UPVOTES</b></font> would be highly appreciated**.","metadata":{}},{"cell_type":"markdown","source":"<a class=\"anchor\" id=\"0.1\"></a>\n# **Table of Contents**\n\n\n1.\t[Introduction to Decision Tree algorithm](#1)\n2.\t[Classification and Regression Trees](#2)\n3.\t[Decision Tree algorithm terminology](#3)\n4.\t[Decision Tree algorithm intuition](#4)\n5.\t[Attribute selection measures](#5)\n    - 5.1 [Information gain](#5.1)\n    - 5.2 [Gini index](#5.2)\n6.\t[Overfitting in Decision-Tree algorithm](#6)\n7.\t[Import libraries](#7)\n8.\t[Import dataset](#8)\n9.\t[Exploratory data analysis](#9)\n10.\t[Declare feature vector and target variable](#10)\n11.\t[Split data into separate training and test set](#11)\n12.\t[Feature engineering](#12)\n13.\t[Decision Tree classifier with criterion gini-index](#13)\n14.\t[Decision Tree classifier with criterion entropy](#14)\n15.\t[Confusion matrix](#15)\n16.\t[Classification report](#16)\n17.\t[Results and conclusion](#17)\n18. [References](#18)\n","metadata":{}},{"cell_type":"markdown","source":"# **1. Introduction to Decision Tree algorithm** <a class=\"anchor\" id=\"1\"></a>\n\n[Table of Contents](#0.1)\n\nA Decision Tree algorithm is one of the most popular machine learning algorithms. It uses a tree like structure and their possible combinations to solve a particular problem. It belongs to the class of supervised learning algorithms where it can be used for both classification and regression purposes. \n\n\nA decision tree is a structure that includes a root node, branches, and leaf nodes. Each internal node denotes a test on an attribute, each branch denotes the outcome of a test, and each leaf node holds a class label. The topmost node in the tree is the root node. \n\n\nWe make some assumptions while implementing the Decision-Tree algorithm. These are listed below:-\n\n1. At the beginning, the whole training set is considered as the root.\n2. Feature values need to be categorical. If the values are continuous then they are discretized prior to building the model.\n3. Records are distributed recursively on the basis of attribute values.\n4. Order to placing attributes as root or internal node of the tree is done by using some statistical approach.\n\n\nI will describe Decision Tree terminology in later section.\n","metadata":{}},{"cell_type":"markdown","source":"# **2. Classification and Regression Trees (CART)** <a class=\"anchor\" id=\"2\"></a>\n\n[Table of Contents](#0.1)\n\n\nNowadays, Decision Tree algorithm is known by its modern name **CART** which stands for **Classification and Regression Trees**. Classification and Regression Trees or **CART** is a term introduced by Leo Breiman to refer to Decision Tree algorithms that can be used for classification and regression modeling problems.\n\n\nThe CART algorithm provides a foundation for other important algorithms like bagged decision trees, random forest and boosted decision trees. In this kernel, I will solve a classification problem. So, I will refer the algorithm also as Decision Tree Classification problem. \n","metadata":{}},{"cell_type":"markdown","source":"# **3. Decision Tree algorithm terminology** <a class=\"anchor\" id=\"3\"></a>\n\n[Table of Contents](#0.1)\n\n\n- In a Decision Tree algorithm, there is a tree like structure in which each internal node represents a test on an attribute, each branch represents the outcome of the test, and each leaf node represents a class label. The paths from the root node to leaf node represent classification rules.\n\n- We can see that there is some terminology involved in Decision Tree algorithm. The terms involved in Decision Tree algorithm are as follows:-\n\n\n## **Root Node**\n\n- It represents the entire population or sample. This further gets divided into two or more homogeneous sets.\n\n\n## **Splitting**\n\n- It is a process of dividing a node into two or more sub-nodes.\n\n\n## Decision Node\n\n- When a sub-node splits into further sub-nodes, then it is called a decision node.\n\n\n## Leaf/Terminal Node\n\n- Nodes that do not split are called Leaf or Terminal nodes.\n\n\n## Pruning\n\n- When we remove sub-nodes of a decision node, this process is called pruning. It is the opposite process of splitting.\n\n\n## Branch/Sub-Tree\n\n- A sub-section of an entire tree is called a branch or sub-tree.\n\n\n## Parent and Child Node\n\n- A node, which is divided into sub-nodes is called the parent node of sub-nodes where sub-nodes are the children of a parent node. \n\n\nThe above terminology is represented clearly in the following diagram:-","metadata":{}},{"cell_type":"markdown","source":"### Decision-Tree terminology\n\n![Decision-Tree terminology](https://gdcoder.com/content/images/2019/05/Screen-Shot-2019-05-18-at-03.40.41.png)","metadata":{}},{"cell_type":"markdown","source":"# **4. Decision Tree algorithm intuition** <a class=\"anchor\" id=\"4\"></a>\n\n[Table of Contents](#0.1)\n\nThe Decision-Tree algorithm is one of the most frequently and widely used supervised machine learning algorithms that can be used for both classification and regression tasks. The intuition behind the Decision-Tree algorithm is very simple to understand.\n\n\nThe Decision Tree algorithm intuition is as follows:-\n\n\n1.\tFor each attribute in the dataset, the Decision-Tree algorithm forms a node. The most important attribute is placed at the root node. \n\n2.\tFor evaluating the task in hand, we start at the root node and we work our way down the tree by following the corresponding node that meets our condition or decision.\n\n3.\tThis process continues until a leaf node is reached. It contains the prediction or the outcome of the Decision Tree.\n","metadata":{}},{"cell_type":"markdown","source":"# **5. Attribute selection measures** <a class=\"anchor\" id=\"5\"></a>\n\n[Table of Contents](#0.1)\n\n\nThe primary challenge in the Decision Tree implementation is to identify the attributes which we consider as the root node and each level. This process is known as the **attributes selection**. There are different attributes selection measure to identify the attribute which can be considered as the root node at each level.\n\n\nThere are 2 popular attribute selection measures. They are as follows:-\n\n\n- **Information gain**\n\n- **Gini index**\n\n\nWhile using **Information gain** as a criterion, we assume attributes to be categorical and for **Gini index** attributes are assumed to be continuous. These attribute selection measures are described below.\n","metadata":{}},{"cell_type":"markdown","source":"## **5.1 Information gain** <a class=\"anchor\" id=\"5.1\"></a>\n\n[Table of Contents](#0.1)\n\n\nBy using information gain as a criterion, we try to estimate the information contained by each attribute. To understand the concept of Information Gain, we need to know another concept called **Entropy**. \n\n## **Entropy**\n\nEntropy measures the impurity in the given dataset. In Physics and Mathematics, entropy is referred to as the randomness or uncertainty of a random variable X. In information theory, it refers to the impurity in a group of examples. **Information gain** is the decrease in entropy. Information gain computes the difference between entropy before split and average entropy after split of the dataset based on given attribute values. \n\nEntropy is represented by the following formula:-\n\n\n","metadata":{}},{"cell_type":"markdown","source":"![Entropy](http://www.learnbymarketing.com/wp-content/uploads/2016/02/entropy-formula.png)\n\n\n\nHere, **c** is the number of classes and **pi** is the probability associated with the ith class. ","metadata":{}},{"cell_type":"markdown","source":"The ID3 (Iterative Dichotomiser) Decision Tree algorithm uses entropy to calculate information gain. So, by calculating decrease in **entropy measure** of each attribute we can calculate their information gain. The attribute with the highest information gain is chosen as the splitting attribute at the node.","metadata":{}},{"cell_type":"markdown","source":"## **5.2 Gini index** <a class=\"anchor\" id=\"5.2\"></a>\n\n[Table of Contents](#0.1)\n\n\nAnother attribute selection measure that **CART (Categorical and Regression Trees)** uses is the **Gini index**. It uses the Gini method to create split points. \n\n\nGini index can be represented with the following diagram:-","metadata":{}},{"cell_type":"markdown","source":"## **Gini index**\n\n![Gini index](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRzYHkcmZKKp2sJN1HpHvw-NgqbD9EnapnbXozXRgajrSGvEnYy&s)\n\n\nHere, again **c** is the number of classes and **pi** is the probability associated with the ith class.","metadata":{}},{"cell_type":"markdown","source":"Gini index says, if we randomly select two items from a population, they must be of the same class and probability for this is 1 if the population is pure.\n\nIt works with the categorical target variable “Success” or “Failure”. It performs only binary splits. The higher the value of Gini, higher the homogeneity. CART (Classification and Regression Tree) uses the Gini method to create binary splits.\n\nSteps to Calculate Gini for a split\n\n1.\tCalculate Gini for sub-nodes, using formula sum of the square of probability for success and failure (p^2+q^2).\n\n2.\tCalculate Gini for split using weighted Gini score of each node of that split.\n\n\nIn case of a discrete-valued attribute, the subset that gives the minimum gini index for that chosen is selected as a splitting attribute. In the case of continuous-valued attributes, the strategy is to select each pair of adjacent values as a possible split-point and point with smaller gini index chosen as the splitting point. The attribute with minimum Gini index is chosen as the splitting attribute.","metadata":{}},{"cell_type":"markdown","source":"# **6. Overfitting in Decision Tree algorithm** <a class=\"anchor\" id=\"6\"></a>\n\n[Table of Contents](#0.1)\n\n\nOverfitting is a practical problem while building a Decision-Tree model. The problem of overfitting is considered when the algorithm continues to go deeper and deeper to reduce the training-set error but results with an increased test-set error. So, accuracy of prediction for our model goes down. It generally happens when we build many branches due to outliers and irregularities in data.\n\nTwo approaches which can be used to avoid overfitting are as follows:-\n\n- Pre-Pruning\n\n- Post-Pruning\n\n\n## **Pre-Pruning**\n\nIn pre-pruning, we stop the tree construction a bit early. We prefer not to split a node if its goodness measure is below a threshold value. But it is difficult to choose an appropriate stopping point.\n\n\n## **Post-Pruning**\n\nIn post-pruning, we go deeper and deeper in the tree to build a complete tree. If the tree shows the overfitting problem then pruning is done as a post-pruning step. We use the cross-validation data to check the effect of our pruning. Using cross-validation data, we test whether expanding a node will result in improve or not. If it shows an improvement, then we can continue by expanding that node. But if it shows a reduction in accuracy then it should not be expanded. So, the node should be converted to a leaf node.","metadata":{}},{"cell_type":"markdown","source":"# **7. Import libraries** <a class=\"anchor\" id=\"7\"></a>\n\n[Table of Contents](#0.1)","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visualization\nimport seaborn as sns # statistical data visualization\n%matplotlib inline\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:00:46.258865Z","iopub.execute_input":"2024-09-04T16:00:46.259271Z","iopub.status.idle":"2024-09-04T16:00:48.201014Z","shell.execute_reply.started":"2024-09-04T16:00:46.259210Z","shell.execute_reply":"2024-09-04T16:00:48.199468Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/social-network-ads/Social_Network_Ads.csv\n/kaggle/input/car-evaluation-data-set/car_evaluation.csv\n/kaggle/input/drug-classification/drug200.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import warnings\n\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:00:48.203773Z","iopub.execute_input":"2024-09-04T16:00:48.204145Z","iopub.status.idle":"2024-09-04T16:00:48.209282Z","shell.execute_reply.started":"2024-09-04T16:00:48.204079Z","shell.execute_reply":"2024-09-04T16:00:48.208127Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"# **8. Import dataset** <a class=\"anchor\" id=\"8\"></a>\n\n[Table of Contents](#0.1)","metadata":{}},{"cell_type":"code","source":"data = '/kaggle/input/drug-classification/drug200.csv'\n\ndf = pd.read_csv(data, header=None)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:00:48.211284Z","iopub.execute_input":"2024-09-04T16:00:48.211744Z","iopub.status.idle":"2024-09-04T16:00:48.237245Z","shell.execute_reply.started":"2024-09-04T16:00:48.211660Z","shell.execute_reply":"2024-09-04T16:00:48.236089Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"# **9. Exploratory data analysis** <a class=\"anchor\" id=\"9\"></a>\n\n[Table of Contents](#0.1)\n\n\nNow, I will explore the data to gain insights about the data. ","metadata":{}},{"cell_type":"code","source":"# view dimensions of dataset\n\ndf.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:00:48.239042Z","iopub.execute_input":"2024-09-04T16:00:48.239451Z","iopub.status.idle":"2024-09-04T16:00:48.248867Z","shell.execute_reply.started":"2024-09-04T16:00:48.239373Z","shell.execute_reply":"2024-09-04T16:00:48.247960Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(201, 6)"},"metadata":{}}]},{"cell_type":"markdown","source":"We can see that there are 1728 instances and 7 variables in the data set.","metadata":{}},{"cell_type":"markdown","source":"### View top 5 rows of dataset","metadata":{}},{"cell_type":"code","source":"# preview the dataset\n\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:00:48.253630Z","iopub.execute_input":"2024-09-04T16:00:48.254052Z","iopub.status.idle":"2024-09-04T16:00:48.292013Z","shell.execute_reply.started":"2024-09-04T16:00:48.253958Z","shell.execute_reply":"2024-09-04T16:00:48.290457Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"     0    1       2            3        4      5\n0  Age  Sex      BP  Cholesterol  Na_to_K   Drug\n1   23    F    HIGH         HIGH   25.355  DrugY\n2   47    M     LOW         HIGH   13.093  drugC\n3   47    M     LOW         HIGH   10.114  drugC\n4   28    F  NORMAL         HIGH    7.798  drugX","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Age</td>\n      <td>Sex</td>\n      <td>BP</td>\n      <td>Cholesterol</td>\n      <td>Na_to_K</td>\n      <td>Drug</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>23</td>\n      <td>F</td>\n      <td>HIGH</td>\n      <td>HIGH</td>\n      <td>25.355</td>\n      <td>DrugY</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>47</td>\n      <td>M</td>\n      <td>LOW</td>\n      <td>HIGH</td>\n      <td>13.093</td>\n      <td>drugC</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>47</td>\n      <td>M</td>\n      <td>LOW</td>\n      <td>HIGH</td>\n      <td>10.114</td>\n      <td>drugC</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>28</td>\n      <td>F</td>\n      <td>NORMAL</td>\n      <td>HIGH</td>\n      <td>7.798</td>\n      <td>drugX</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Rename column names\n\nWe can see that the dataset does not have proper column names. The columns are merely labelled as 0,1,2.... and so on. We should give proper names to the columns. I will do it as follows:-","metadata":{}},{"cell_type":"code","source":"col_names = ['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K', 'Drug']\n\n\ndf.columns = col_names\n\ncol_names","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:00:48.295306Z","iopub.execute_input":"2024-09-04T16:00:48.295708Z","iopub.status.idle":"2024-09-04T16:00:48.302948Z","shell.execute_reply.started":"2024-09-04T16:00:48.295631Z","shell.execute_reply":"2024-09-04T16:00:48.301810Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K', 'Drug']"},"metadata":{}}]},{"cell_type":"code","source":"# let's again preview the dataset\ndf = df.drop(index=0)\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:00:48.304763Z","iopub.execute_input":"2024-09-04T16:00:48.305086Z","iopub.status.idle":"2024-09-04T16:00:48.331381Z","shell.execute_reply.started":"2024-09-04T16:00:48.305027Z","shell.execute_reply":"2024-09-04T16:00:48.330247Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"  Age Sex      BP Cholesterol Na_to_K   Drug\n1  23   F    HIGH        HIGH  25.355  DrugY\n2  47   M     LOW        HIGH  13.093  drugC\n3  47   M     LOW        HIGH  10.114  drugC\n4  28   F  NORMAL        HIGH   7.798  drugX\n5  61   F     LOW        HIGH  18.043  DrugY","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Sex</th>\n      <th>BP</th>\n      <th>Cholesterol</th>\n      <th>Na_to_K</th>\n      <th>Drug</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>23</td>\n      <td>F</td>\n      <td>HIGH</td>\n      <td>HIGH</td>\n      <td>25.355</td>\n      <td>DrugY</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>47</td>\n      <td>M</td>\n      <td>LOW</td>\n      <td>HIGH</td>\n      <td>13.093</td>\n      <td>drugC</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>47</td>\n      <td>M</td>\n      <td>LOW</td>\n      <td>HIGH</td>\n      <td>10.114</td>\n      <td>drugC</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>28</td>\n      <td>F</td>\n      <td>NORMAL</td>\n      <td>HIGH</td>\n      <td>7.798</td>\n      <td>drugX</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>61</td>\n      <td>F</td>\n      <td>LOW</td>\n      <td>HIGH</td>\n      <td>18.043</td>\n      <td>DrugY</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"We can see that the column names are renamed. Now, the columns have meaningful names.","metadata":{}},{"cell_type":"markdown","source":"### View summary of dataset","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:00:48.333305Z","iopub.execute_input":"2024-09-04T16:00:48.333949Z","iopub.status.idle":"2024-09-04T16:00:48.356038Z","shell.execute_reply.started":"2024-09-04T16:00:48.333873Z","shell.execute_reply":"2024-09-04T16:00:48.354408Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 200 entries, 1 to 200\nData columns (total 6 columns):\nAge            200 non-null object\nSex            200 non-null object\nBP             200 non-null object\nCholesterol    200 non-null object\nNa_to_K        200 non-null object\nDrug           200 non-null object\ndtypes: object(6)\nmemory usage: 10.9+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Frequency distribution of values in variables\n\nNow, I will check the frequency counts of categorical variables.","metadata":{}},{"cell_type":"code","source":"col_names = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']\n\n\nfor col in col_names:\n    \n    print(df[col].value_counts())   \n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:00:48.358025Z","iopub.execute_input":"2024-09-04T16:00:48.358346Z","iopub.status.idle":"2024-09-04T16:00:48.628340Z","shell.execute_reply.started":"2024-09-04T16:00:48.358298Z","shell.execute_reply":"2024-09-04T16:00:48.624981Z"},"trusted":true},"execution_count":9,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/opt/conda/lib/python3.6/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2896\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2897\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2898\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'buying'","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-a00a24f3ccfd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcol_names\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/opt/conda/lib/python3.6/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2993\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2994\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2995\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2996\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2997\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.6/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2897\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2898\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2899\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2900\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2901\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'buying'"],"ename":"KeyError","evalue":"'buying'","output_type":"error"}]},{"cell_type":"markdown","source":"We can see that the `doors` and `persons` are categorical in nature. So, I will treat them as categorical variables.","metadata":{}},{"cell_type":"markdown","source":"### Summary of variables\n\n\n- There are 7 variables in the dataset. All the variables are of categorical data type.\n\n\n- These are given by `buying`, `maint`, `doors`, `persons`, `lug_boot`, `safety` and `class`.\n\n\n- `class` is the target variable.","metadata":{}},{"cell_type":"markdown","source":"### Explore `class` variable","metadata":{}},{"cell_type":"code","source":"df['Drug'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:10.814240Z","iopub.execute_input":"2024-09-04T16:02:10.814774Z","iopub.status.idle":"2024-09-04T16:02:10.828026Z","shell.execute_reply.started":"2024-09-04T16:02:10.814688Z","shell.execute_reply":"2024-09-04T16:02:10.826582Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"DrugY    91\ndrugX    54\ndrugA    23\ndrugC    16\ndrugB    16\nName: Drug, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"The `class` target variable is ordinal in nature.","metadata":{}},{"cell_type":"markdown","source":"### Missing values in variables","metadata":{}},{"cell_type":"code","source":"# check missing values in variables\n\ndf.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:10.830475Z","iopub.execute_input":"2024-09-04T16:02:10.830883Z","iopub.status.idle":"2024-09-04T16:02:10.847253Z","shell.execute_reply.started":"2024-09-04T16:02:10.830796Z","shell.execute_reply":"2024-09-04T16:02:10.846120Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"Age            0\nSex            0\nBP             0\nCholesterol    0\nNa_to_K        0\nDrug           0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"We can see that there are no missing values in the dataset. I have checked the frequency distribution of values previously. It also confirms that there are no missing values in the dataset.","metadata":{}},{"cell_type":"markdown","source":"# **10. Declare feature vector and target variable** <a class=\"anchor\" id=\"10\"></a>\n\n[Table of Contents](#0.1)","metadata":{}},{"cell_type":"code","source":"X = df.drop(['Drug'], axis=1)\n\ny = df['Drug']","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:10.849045Z","iopub.execute_input":"2024-09-04T16:02:10.849487Z","iopub.status.idle":"2024-09-04T16:02:10.864245Z","shell.execute_reply.started":"2024-09-04T16:02:10.849404Z","shell.execute_reply":"2024-09-04T16:02:10.863210Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"# **11. Split data into separate training and test set** <a class=\"anchor\" id=\"11\"></a>\n\n[Table of Contents](#0.1)","metadata":{}},{"cell_type":"code","source":"# split X and y into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:10.865899Z","iopub.execute_input":"2024-09-04T16:02:10.866261Z","iopub.status.idle":"2024-09-04T16:02:12.795940Z","shell.execute_reply.started":"2024-09-04T16:02:10.866204Z","shell.execute_reply":"2024-09-04T16:02:12.794561Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# check the shape of X_train and X_test\n\nX_train.shape, X_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:12.800572Z","iopub.execute_input":"2024-09-04T16:02:12.801055Z","iopub.status.idle":"2024-09-04T16:02:12.811879Z","shell.execute_reply.started":"2024-09-04T16:02:12.800972Z","shell.execute_reply":"2024-09-04T16:02:12.810456Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"((160, 5), (40, 5))"},"metadata":{}}]},{"cell_type":"markdown","source":"# **12. Feature Engineering** <a class=\"anchor\" id=\"12\"></a>\n\n[Table of Contents](#0.1)\n\n\n**Feature Engineering** is the process of transforming raw data into useful features that help us to understand our model better and increase its predictive power. I will carry out feature engineering on different types of variables.\n\n\nFirst, I will check the data types of variables again.","metadata":{}},{"cell_type":"code","source":"# check data types in X_train\n\nX_train.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:12.815985Z","iopub.execute_input":"2024-09-04T16:02:12.816369Z","iopub.status.idle":"2024-09-04T16:02:12.830274Z","shell.execute_reply.started":"2024-09-04T16:02:12.816303Z","shell.execute_reply":"2024-09-04T16:02:12.828746Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"Age            object\nSex            object\nBP             object\nCholesterol    object\nNa_to_K        object\ndtype: object"},"metadata":{}}]},{"cell_type":"markdown","source":"### Encode categorical variables\n\n\nNow, I will encode the categorical variables.","metadata":{}},{"cell_type":"code","source":"X_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:12.832426Z","iopub.execute_input":"2024-09-04T16:02:12.832944Z","iopub.status.idle":"2024-09-04T16:02:12.862395Z","shell.execute_reply.started":"2024-09-04T16:02:12.832863Z","shell.execute_reply":"2024-09-04T16:02:12.861157Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"    Age Sex      BP Cholesterol Na_to_K\n80   32   F     LOW      NORMAL   10.84\n198  52   M  NORMAL        HIGH   9.894\n39   39   F  NORMAL      NORMAL   9.709\n25   33   F     LOW        HIGH  33.486\n123  34   M  NORMAL        HIGH  22.456","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Sex</th>\n      <th>BP</th>\n      <th>Cholesterol</th>\n      <th>Na_to_K</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>80</th>\n      <td>32</td>\n      <td>F</td>\n      <td>LOW</td>\n      <td>NORMAL</td>\n      <td>10.84</td>\n    </tr>\n    <tr>\n      <th>198</th>\n      <td>52</td>\n      <td>M</td>\n      <td>NORMAL</td>\n      <td>HIGH</td>\n      <td>9.894</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>39</td>\n      <td>F</td>\n      <td>NORMAL</td>\n      <td>NORMAL</td>\n      <td>9.709</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>33</td>\n      <td>F</td>\n      <td>LOW</td>\n      <td>HIGH</td>\n      <td>33.486</td>\n    </tr>\n    <tr>\n      <th>123</th>\n      <td>34</td>\n      <td>M</td>\n      <td>NORMAL</td>\n      <td>HIGH</td>\n      <td>22.456</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"We can see that all  the variables are ordinal categorical data type.","metadata":{}},{"cell_type":"code","source":"# import category encoders\n\nimport category_encoders as ce","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:12.864649Z","iopub.execute_input":"2024-09-04T16:02:12.865109Z","iopub.status.idle":"2024-09-04T16:02:12.940169Z","shell.execute_reply.started":"2024-09-04T16:02:12.865029Z","shell.execute_reply":"2024-09-04T16:02:12.938902Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"# encode variables with ordinal encoding\n\nencoder = ce.OrdinalEncoder(cols=['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K'])\n\n\nX_train = encoder.fit_transform(X_train)\n\nX_test = encoder.fit_transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:12.941697Z","iopub.execute_input":"2024-09-04T16:02:12.942023Z","iopub.status.idle":"2024-09-04T16:02:13.033036Z","shell.execute_reply.started":"2024-09-04T16:02:12.941972Z","shell.execute_reply":"2024-09-04T16:02:13.031839Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"X_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:13.034562Z","iopub.execute_input":"2024-09-04T16:02:13.034884Z","iopub.status.idle":"2024-09-04T16:02:13.050160Z","shell.execute_reply.started":"2024-09-04T16:02:13.034833Z","shell.execute_reply":"2024-09-04T16:02:13.048725Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"     Age  Sex  BP  Cholesterol  Na_to_K\n80     1    1   1            1        1\n198    2    2   2            2        2\n39     3    1   2            1        3\n25     4    1   1            2        4\n123    5    2   2            2        5","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Sex</th>\n      <th>BP</th>\n      <th>Cholesterol</th>\n      <th>Na_to_K</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>80</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>198</th>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>3</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>123</th>\n      <td>5</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:13.052412Z","iopub.execute_input":"2024-09-04T16:02:13.052971Z","iopub.status.idle":"2024-09-04T16:02:13.077309Z","shell.execute_reply.started":"2024-09-04T16:02:13.052879Z","shell.execute_reply":"2024-09-04T16:02:13.075948Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"      Age  Sex  BP  Cholesterol  Na_to_K\n96   40.0    2   1            1     -1.0\n16   50.0    1   3            1     -1.0\n31   44.0    1   2            1     -1.0\n159  33.0    1   1            2     -1.0\n129  29.0    2   1            1     -1.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Sex</th>\n      <th>BP</th>\n      <th>Cholesterol</th>\n      <th>Na_to_K</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>96</th>\n      <td>40.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>-1.0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>50.0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>-1.0</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>44.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>-1.0</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>33.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>-1.0</td>\n    </tr>\n    <tr>\n      <th>129</th>\n      <td>29.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>-1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"We now have training and test set ready for model building. ","metadata":{}},{"cell_type":"markdown","source":"# **13. Decision Tree Classifier with criterion gini index** <a class=\"anchor\" id=\"13\"></a>\n\n[Table of Contents](#0.1)","metadata":{}},{"cell_type":"code","source":"# import DecisionTreeClassifier\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\ndef print_score(clf, X_train, y_train, X_test, y_test, train=True):\n    if train:\n        pred = clf.predict(X_train)\n        clf_report = pd.DataFrame(classification_report(y_train, pred, output_dict=True))\n        print(\"Train Result:\\n================================================\")\n        print(f\"Accuracy Score: {accuracy_score(y_train, pred) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(f\"CLASSIFICATION REPORT:\\n{clf_report}\")\n        print(\"_______________________________________________\")\n        print(f\"Confusion Matrix: \\n {confusion_matrix(y_train, pred)}\\n\")\n        \n    elif train==False:\n        pred = clf.predict(X_test)\n        clf_report = pd.DataFrame(classification_report(y_test, pred, output_dict=True))\n        print(\"Test Result:\\n================================================\")        \n        print(f\"Accuracy Score: {accuracy_score(y_test, pred) * 100:.2f}%\")\n        print(\"_______________________________________________\")\n        print(f\"CLASSIFICATION REPORT:\\n{clf_report}\")\n        print(\"_______________________________________________\")\n        print(f\"Confusion Matrix: \\n {confusion_matrix(y_test, pred)}\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:13.079582Z","iopub.execute_input":"2024-09-04T16:02:13.080392Z","iopub.status.idle":"2024-09-04T16:02:13.285457Z","shell.execute_reply.started":"2024-09-04T16:02:13.080136Z","shell.execute_reply":"2024-09-04T16:02:13.284441Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\n\ntree_clf = DecisionTreeClassifier(random_state=0)\ntree_clf.fit(X_train, y_train)\ny_pred = tree_clf.predict(X_test)\n\nprint_score(tree_clf, X_train, y_train, X_test, y_test, train=True)\nprint_score(tree_clf, X_train, y_train, X_test, y_test, train=False)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:13.287206Z","iopub.execute_input":"2024-09-04T16:02:13.287536Z","iopub.status.idle":"2024-09-04T16:02:13.351920Z","shell.execute_reply.started":"2024-09-04T16:02:13.287471Z","shell.execute_reply":"2024-09-04T16:02:13.350770Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Train Result:\n================================================\nAccuracy Score: 100.00%\n_______________________________________________\nCLASSIFICATION REPORT:\n           DrugY  drugA  drugB  drugC  drugX  accuracy  macro avg  \\\nprecision    1.0    1.0    1.0    1.0    1.0       1.0        1.0   \nrecall       1.0    1.0    1.0    1.0    1.0       1.0        1.0   \nf1-score     1.0    1.0    1.0    1.0    1.0       1.0        1.0   \nsupport     76.0   17.0   13.0   11.0   43.0       1.0      160.0   \n\n           weighted avg  \nprecision           1.0  \nrecall              1.0  \nf1-score            1.0  \nsupport           160.0  \n_______________________________________________\nConfusion Matrix: \n [[76  0  0  0  0]\n [ 0 17  0  0  0]\n [ 0  0 13  0  0]\n [ 0  0  0 11  0]\n [ 0  0  0  0 43]]\n\nTest Result:\n================================================\nAccuracy Score: 40.00%\n_______________________________________________\nCLASSIFICATION REPORT:\n               DrugY  drugA     drugB  drugC      drugX  accuracy  macro avg  \\\nprecision   0.333333    0.0  0.250000    0.8   0.444444       0.4   0.365556   \nrecall      0.400000    0.0  0.666667    0.8   0.363636       0.4   0.446061   \nf1-score    0.363636    0.0  0.363636    0.8   0.400000       0.4   0.385455   \nsupport    15.000000    6.0  3.000000    5.0  11.000000       0.4  40.000000   \n\n           weighted avg  \nprecision      0.365972  \nrecall         0.400000  \nf1-score       0.373636  \nsupport       40.000000  \n_______________________________________________\nConfusion Matrix: \n [[6 0 3 1 5]\n [3 0 3 0 0]\n [1 0 2 0 0]\n [1 0 0 4 0]\n [7 0 0 0 4]]\n\n","output_type":"stream"}]},{"cell_type":"code","source":"print(confusion_matrix(y_test,y_pred))\nsns.heatmap(confusion_matrix(y_test,y_pred), annot=True, fmt='d', cmap='Greys', annot_kws={\"size\": 20})\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\nprint('\\n')\nprint(classification_report(y_test,y_pred))\nprint('\\n')","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:02:13.353329Z","iopub.execute_input":"2024-09-04T16:02:13.353701Z","iopub.status.idle":"2024-09-04T16:02:14.040966Z","shell.execute_reply.started":"2024-09-04T16:02:13.353593Z","shell.execute_reply":"2024-09-04T16:02:14.039188Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"[[6 0 3 1 5]\n [3 0 3 0 0]\n [1 0 2 0 0]\n [1 0 0 4 0]\n [7 0 0 0 4]]\n\n\n              precision    recall  f1-score   support\n\n       DrugY       0.33      0.40      0.36        15\n       drugA       0.00      0.00      0.00         6\n       drugB       0.25      0.67      0.36         3\n       drugC       0.80      0.80      0.80         5\n       drugX       0.44      0.36      0.40        11\n\n    accuracy                           0.40        40\n   macro avg       0.37      0.45      0.39        40\nweighted avg       0.37      0.40      0.37        40\n\n\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"from sklearn import tree\nimport graphviz \ndot_data = tree.export_graphviz(tree_clf, out_file=None, \n                              feature_names=X_train.columns,  \n                              class_names=y_train,  \n                              filled=True, rounded=True,  \n                              special_characters=True)\n\ngraph = graphviz.Source(dot_data) \ngraph.format = 'png'\ngraph.render('or')  # This will save and open the PNG file\ngraph\nprint(\"Graph saved as 'or.png'\")\ngraph ","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:05:14.021267Z","iopub.execute_input":"2024-09-04T16:05:14.021650Z","iopub.status.idle":"2024-09-04T16:05:14.096152Z","shell.execute_reply.started":"2024-09-04T16:05:14.021595Z","shell.execute_reply":"2024-09-04T16:05:14.094750Z"},"trusted":true},"execution_count":27,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-27-0356b33af7f2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m                               \u001b[0mclass_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m                               \u001b[0mfilled\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrounded\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m                               special_characters=True)\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mgraph\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgraphviz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSource\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdot_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.6/site-packages/sklearn/tree/export.py\u001b[0m in \u001b[0;36mexport_graphviz\u001b[0;34m(decision_tree, out_file, max_depth, feature_names, class_names, label, filled, leaves_parallel, impurity, node_ids, proportion, rotate, rounded, special_characters, precision)\u001b[0m\n\u001b[1;32m    774\u001b[0m             \u001b[0mrounded\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrounded\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mspecial_characters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mspecial_characters\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    775\u001b[0m             precision=precision)\n\u001b[0;32m--> 776\u001b[0;31m         \u001b[0mexporter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexport\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdecision_tree\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    777\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    778\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mreturn_string\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.6/site-packages/sklearn/tree/export.py\u001b[0m in \u001b[0;36mexport\u001b[0;34m(self, decision_tree)\u001b[0m\n\u001b[1;32m    407\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    408\u001b[0m             self.recurse(decision_tree.tree_, 0,\n\u001b[0;32m--> 409\u001b[0;31m                          criterion=decision_tree.criterion)\n\u001b[0m\u001b[1;32m    410\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    411\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtail\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.6/site-packages/sklearn/tree/export.py\u001b[0m in \u001b[0;36mrecurse\u001b[0;34m(self, tree, node_id, criterion, parent, depth)\u001b[0m\n\u001b[1;32m    467\u001b[0m             self.out_file.write(\n\u001b[1;32m    468\u001b[0m                 '%d [label=%s' % (node_id, self.node_to_str(tree, node_id,\n\u001b[0;32m--> 469\u001b[0;31m                                                             criterion)))\n\u001b[0m\u001b[1;32m    470\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    471\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.6/site-packages/sklearn/tree/export.py\u001b[0m in \u001b[0;36mnode_to_str\u001b[0;34m(self, tree, node_id, criterion)\u001b[0m\n\u001b[1;32m    337\u001b[0m                 \u001b[0mnode_string\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m'class = '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_names\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 339\u001b[0;31m                 \u001b[0mclass_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_names\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    340\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m                 class_name = \"y%s%s%s\" % (characters[1],\n","\u001b[0;32m/opt/conda/lib/python3.6/site-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1069\u001b[0m         \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1070\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1073\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.6/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_value\u001b[0;34m(self, series, key)\u001b[0m\n\u001b[1;32m   4728\u001b[0m         \u001b[0mk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_convert_scalar_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"getitem\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4729\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4730\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtz\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseries\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"tz\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4731\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4732\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mholds_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_boolean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_value\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_value\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.Int64HashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.Int64HashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 0"],"ename":"KeyError","evalue":"0","output_type":"error"}]},{"cell_type":"code","source":"# instantiate the DecisionTreeClassifier model with criterion gini index\n\nclf_gini = DecisionTreeClassifier(criterion='gini', max_depth=5, random_state=0)\n\n\n# fit the model\nclf_gini.fit(X_train, y_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:05:32.339616Z","iopub.execute_input":"2024-09-04T16:05:32.340154Z","iopub.status.idle":"2024-09-04T16:05:32.357854Z","shell.execute_reply.started":"2024-09-04T16:05:32.340069Z","shell.execute_reply":"2024-09-04T16:05:32.356730Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=5,\n                       max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort=False,\n                       random_state=0, splitter='best')"},"metadata":{}}]},{"cell_type":"markdown","source":"### Predict the Test set results with criterion gini index","metadata":{}},{"cell_type":"code","source":"y_pred_gini = clf_gini.predict(X_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:05:32.361607Z","iopub.execute_input":"2024-09-04T16:05:32.362080Z","iopub.status.idle":"2024-09-04T16:05:32.369670Z","shell.execute_reply.started":"2024-09-04T16:05:32.361993Z","shell.execute_reply":"2024-09-04T16:05:32.368600Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":"### Check accuracy score with criterion gini index","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\n\nprint('Model accuracy score with criterion gini index: {0:0.4f}'. format(accuracy_score(y_test, y_pred_gini)))","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:05:32.371244Z","iopub.execute_input":"2024-09-04T16:05:32.371750Z","iopub.status.idle":"2024-09-04T16:05:32.388564Z","shell.execute_reply.started":"2024-09-04T16:05:32.371512Z","shell.execute_reply":"2024-09-04T16:05:32.387472Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"Model accuracy score with criterion gini index: 0.4000\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Here, **y_test** are the true class labels and **y_pred_gini** are the predicted class labels in the test-set.","metadata":{}},{"cell_type":"markdown","source":"### Compare the train-set and test-set accuracy\n\n\nNow, I will compare the train-set and test-set accuracy to check for overfitting.","metadata":{}},{"cell_type":"code","source":"y_pred_train_gini = clf_gini.predict(X_train)\n\ny_pred_train_gini","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:05:32.390838Z","iopub.execute_input":"2024-09-04T16:05:32.391206Z","iopub.status.idle":"2024-09-04T16:05:32.409379Z","shell.execute_reply.started":"2024-09-04T16:05:32.391150Z","shell.execute_reply":"2024-09-04T16:05:32.408038Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"array(['drugX', 'drugX', 'drugX', 'DrugY', 'drugX', 'DrugY', 'DrugY',\n       'DrugY', 'DrugY', 'drugX', 'drugX', 'DrugY', 'drugX', 'DrugY',\n       'drugX', 'drugX', 'DrugY', 'DrugY', 'drugX', 'DrugY', 'DrugY',\n       'DrugY', 'DrugY', 'DrugY', 'drugX', 'DrugY', 'drugX', 'DrugY',\n       'drugX', 'drugB', 'drugX', 'drugX', 'drugX', 'drugB', 'drugA',\n       'DrugY', 'DrugY', 'drugX', 'DrugY', 'drugX', 'DrugY', 'DrugY',\n       'DrugY', 'DrugY', 'DrugY', 'drugB', 'drugB', 'drugA', 'DrugY',\n       'drugB', 'DrugY', 'DrugY', 'DrugY', 'DrugY', 'DrugY', 'DrugY',\n       'drugX', 'drugX', 'drugX', 'DrugY', 'DrugY', 'DrugY', 'drugB',\n       'drugX', 'drugX', 'drugA', 'DrugY', 'DrugY', 'DrugY', 'DrugY',\n       'DrugY', 'DrugY', 'drugX', 'DrugY', 'drugB', 'DrugY', 'drugB',\n       'drugX', 'DrugY', 'drugX', 'DrugY', 'DrugY', 'DrugY', 'DrugY',\n       'DrugY', 'DrugY', 'DrugY', 'DrugY', 'drugX', 'drugX', 'DrugY',\n       'DrugY', 'DrugY', 'DrugY', 'drugX', 'DrugY', 'drugX', 'DrugY',\n       'DrugY', 'drugX', 'DrugY', 'drugX', 'drugX', 'DrugY', 'DrugY',\n       'drugX', 'DrugY', 'DrugY', 'DrugY', 'drugA', 'drugA', 'drugX',\n       'drugX', 'drugX', 'DrugY', 'DrugY', 'drugX', 'drugX', 'DrugY',\n       'drugX', 'DrugY', 'DrugY', 'drugX', 'DrugY', 'drugX', 'drugB',\n       'DrugY', 'DrugY', 'DrugY', 'drugX', 'drugX', 'DrugY', 'drugX',\n       'DrugY', 'drugX', 'DrugY', 'drugX', 'drugX', 'DrugY', 'drugC',\n       'drugC', 'DrugY', 'drugC', 'DrugY', 'drugB', 'drugX', 'DrugY',\n       'drugX', 'DrugY', 'DrugY', 'DrugY', 'DrugY', 'DrugY', 'DrugY',\n       'DrugY', 'drugX', 'drugX', 'DrugY', 'DrugY', 'DrugY'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train_gini)))","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:05:32.415905Z","iopub.execute_input":"2024-09-04T16:05:32.416593Z","iopub.status.idle":"2024-09-04T16:05:32.426887Z","shell.execute_reply.started":"2024-09-04T16:05:32.416262Z","shell.execute_reply":"2024-09-04T16:05:32.424820Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"Training-set accuracy score: 0.7063\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Check for overfitting and underfitting","metadata":{}},{"cell_type":"code","source":"# print the scores on training and test set\n\nprint('Training set score: {:.4f}'.format(clf_gini.score(X_train, y_train)))\n\nprint('Test set score: {:.4f}'.format(clf_gini.score(X_test, y_test)))","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:05:32.429297Z","iopub.execute_input":"2024-09-04T16:05:32.429686Z","iopub.status.idle":"2024-09-04T16:05:32.446152Z","shell.execute_reply.started":"2024-09-04T16:05:32.429620Z","shell.execute_reply":"2024-09-04T16:05:32.444912Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"Training set score: 0.7063\nTest set score: 0.4000\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Here, the training-set accuracy score is 0.7865 while the test-set accuracy to be 0.8021. These two values are quite comparable. So, there is no sign of overfitting. \n","metadata":{}},{"cell_type":"code","source":"print(confusion_matrix(y_test,y_pred_gini))\nsns.heatmap(confusion_matrix(y_test,y_pred_gini), annot=True, fmt='d', cmap='Greys', annot_kws={\"size\": 20})\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\nprint('\\n')\nprint(classification_report(y_test,y_pred_gini))\nprint('\\n')","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:05:32.448203Z","iopub.execute_input":"2024-09-04T16:05:32.448612Z","iopub.status.idle":"2024-09-04T16:05:32.992089Z","shell.execute_reply.started":"2024-09-04T16:05:32.448552Z","shell.execute_reply":"2024-09-04T16:05:32.990546Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"[[10  0  3  0  2]\n [ 3  0  3  0  0]\n [ 1  0  2  0  0]\n [ 5  0  0  0  0]\n [ 7  0  0  0  4]]\n\n\n              precision    recall  f1-score   support\n\n       DrugY       0.38      0.67      0.49        15\n       drugA       0.00      0.00      0.00         6\n       drugB       0.25      0.67      0.36         3\n       drugC       0.00      0.00      0.00         5\n       drugX       0.67      0.36      0.47        11\n\n    accuracy                           0.40        40\n   macro avg       0.26      0.34      0.26        40\nweighted avg       0.35      0.40      0.34        40\n\n\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"### Visualize decision-trees","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(12,8))\n\nfrom sklearn import tree\n\ntree.plot_tree(clf_gini.fit(X_train, y_train)) ","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:05:32.994627Z","iopub.execute_input":"2024-09-04T16:05:32.995685Z","iopub.status.idle":"2024-09-04T16:05:34.572239Z","shell.execute_reply.started":"2024-09-04T16:05:32.995554Z","shell.execute_reply":"2024-09-04T16:05:34.570965Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"[Text(377.7230769230769, 398.64, 'X[2] <= 2.5\\ngini = 0.68\\nsamples = 160\\nvalue = [76, 17, 13, 11, 43]'),\n Text(193.15384615384616, 326.15999999999997, 'X[2] <= 1.5\\ngini = 0.593\\nsamples = 98\\nvalue = [44, 0, 0, 11, 43]'),\n Text(94.43076923076923, 253.67999999999998, 'X[3] <= 1.5\\ngini = 0.619\\nsamples = 47\\nvalue = [24, 0, 0, 11, 12]'),\n Text(51.50769230769231, 181.2, 'X[4] <= 151.5\\ngini = 0.496\\nsamples = 22\\nvalue = [10, 0, 0, 0, 12]'),\n Text(34.33846153846154, 108.71999999999997, 'X[0] <= 8.0\\ngini = 0.49\\nsamples = 21\\nvalue = [9, 0, 0, 0, 12]'),\n Text(17.16923076923077, 36.23999999999995, 'gini = 0.408\\nsamples = 7\\nvalue = [2, 0, 0, 0, 5]'),\n Text(51.50769230769231, 36.23999999999995, 'gini = 0.5\\nsamples = 14\\nvalue = [7, 0, 0, 0, 7]'),\n Text(68.67692307692307, 108.71999999999997, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n Text(137.35384615384615, 181.2, 'X[4] <= 138.5\\ngini = 0.493\\nsamples = 25\\nvalue = [14, 0, 0, 11, 0]'),\n Text(103.01538461538462, 108.71999999999997, 'X[4] <= 111.0\\ngini = 0.455\\nsamples = 20\\nvalue = [13, 0, 0, 7, 0]'),\n Text(85.84615384615384, 36.23999999999995, 'gini = 0.492\\nsamples = 16\\nvalue = [9, 0, 0, 7, 0]'),\n Text(120.18461538461538, 36.23999999999995, 'gini = 0.0\\nsamples = 4\\nvalue = [4, 0, 0, 0, 0]'),\n Text(171.69230769230768, 108.71999999999997, 'X[4] <= 145.0\\ngini = 0.32\\nsamples = 5\\nvalue = [1, 0, 0, 4, 0]'),\n Text(154.52307692307693, 36.23999999999995, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 0, 3, 0]'),\n Text(188.86153846153846, 36.23999999999995, 'gini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 1, 0]'),\n Text(291.87692307692305, 253.67999999999998, 'X[0] <= 33.5\\ngini = 0.477\\nsamples = 51\\nvalue = [20, 0, 0, 0, 31]'),\n Text(257.53846153846155, 181.2, 'X[4] <= 157.0\\ngini = 0.431\\nsamples = 35\\nvalue = [11, 0, 0, 0, 24]'),\n Text(240.36923076923077, 108.71999999999997, 'X[4] <= 133.0\\ngini = 0.415\\nsamples = 34\\nvalue = [10, 0, 0, 0, 24]'),\n Text(223.2, 36.23999999999995, 'gini = 0.452\\nsamples = 29\\nvalue = [10, 0, 0, 0, 19]'),\n Text(257.53846153846155, 36.23999999999995, 'gini = 0.0\\nsamples = 5\\nvalue = [0, 0, 0, 0, 5]'),\n Text(274.7076923076923, 108.71999999999997, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n Text(326.2153846153846, 181.2, 'X[4] <= 85.5\\ngini = 0.492\\nsamples = 16\\nvalue = [9, 0, 0, 0, 7]'),\n Text(309.04615384615386, 108.71999999999997, 'gini = 0.0\\nsamples = 3\\nvalue = [3, 0, 0, 0, 0]'),\n Text(343.38461538461536, 108.71999999999997, 'X[4] <= 138.5\\ngini = 0.497\\nsamples = 13\\nvalue = [6, 0, 0, 0, 7]'),\n Text(326.2153846153846, 36.23999999999995, 'gini = 0.463\\nsamples = 11\\nvalue = [4, 0, 0, 0, 7]'),\n Text(360.55384615384617, 36.23999999999995, 'gini = 0.0\\nsamples = 2\\nvalue = [2, 0, 0, 0, 0]'),\n Text(562.2923076923076, 326.15999999999997, 'X[4] <= 120.0\\ngini = 0.614\\nsamples = 62\\nvalue = [32, 17, 13, 0, 0]'),\n Text(506.4923076923077, 253.67999999999998, 'X[0] <= 32.5\\ngini = 0.646\\nsamples = 49\\nvalue = [21, 17, 11, 0, 0]'),\n Text(446.4, 181.2, 'X[4] <= 34.5\\ngini = 0.591\\nsamples = 35\\nvalue = [17, 14, 4, 0, 0]'),\n Text(412.0615384615385, 108.71999999999997, 'X[4] <= 29.0\\ngini = 0.569\\nsamples = 12\\nvalue = [7, 2, 3, 0, 0]'),\n Text(394.89230769230767, 36.23999999999995, 'gini = 0.46\\nsamples = 10\\nvalue = [7, 2, 1, 0, 0]'),\n Text(429.2307692307692, 36.23999999999995, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 2, 0, 0]'),\n Text(480.73846153846154, 108.71999999999997, 'X[0] <= 4.0\\ngini = 0.537\\nsamples = 23\\nvalue = [10, 12, 1, 0, 0]'),\n Text(463.5692307692307, 36.23999999999995, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 3, 0, 0, 0]'),\n Text(497.9076923076923, 36.23999999999995, 'gini = 0.545\\nsamples = 20\\nvalue = [10, 9, 1, 0, 0]'),\n Text(566.5846153846154, 181.2, 'X[4] <= 107.5\\ngini = 0.622\\nsamples = 14\\nvalue = [4, 3, 7, 0, 0]'),\n Text(549.4153846153846, 108.71999999999997, 'X[4] <= 78.0\\ngini = 0.542\\nsamples = 12\\nvalue = [4, 1, 7, 0, 0]'),\n Text(532.2461538461538, 36.23999999999995, 'gini = 0.278\\nsamples = 6\\nvalue = [0, 1, 5, 0, 0]'),\n Text(566.5846153846154, 36.23999999999995, 'gini = 0.444\\nsamples = 6\\nvalue = [4, 0, 2, 0, 0]'),\n Text(583.7538461538461, 108.71999999999997, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n Text(618.0923076923077, 253.67999999999998, 'X[0] <= 45.5\\ngini = 0.26\\nsamples = 13\\nvalue = [11, 0, 2, 0, 0]'),\n Text(600.9230769230769, 181.2, 'gini = 0.0\\nsamples = 9\\nvalue = [9, 0, 0, 0, 0]'),\n Text(635.2615384615384, 181.2, 'X[0] <= 47.5\\ngini = 0.5\\nsamples = 4\\nvalue = [2, 0, 2, 0, 0]'),\n Text(618.0923076923077, 108.71999999999997, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 2, 0, 0]'),\n Text(652.4307692307692, 108.71999999999997, 'gini = 0.0\\nsamples = 2\\nvalue = [2, 0, 0, 0, 0]')]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x576 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAsoAAAHWCAYAAABuaq89AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzs3Xm4FNW19/HvAtGDiCBE4YAoyAFBhDgjIiqCenE2DhiMMU7JVSOSxMRg3nj16tVoNMHhJlGcBzAKhilE4kVjEBAVvAoo8SKCxlmcGA4Gcb1/7DoexAbO0N27q/r3eR4f9Qxd61R3Va3atfZe5u6IiIiIiMhXNYkdgIiIiIhIKVKiLCIiIiKSgxJlEREREZEclCiLiIiIiOSgRFlEREREJAclyiIiIiIiOShRFhERERHJQYmyiIiIiEgOSpRFRERERHJQoiwiIiIikoMSZRERERGRHJQoi4iIiIjkoERZRERERCQHJcoiIiIiIjkoURYRERERyUGJsoiIiIhIDkqURURERERyUKIsIiIiIpKDEmURERERkRyUKIuIiIiI5KBEWUREREQkByXKIiIiIiI5KFEWEREREclBibKIiIiISA5KlEVEREREclCiLCIiIiKSgxJlEREREZEclCiLiIiIiOSgRFlEREREJAclyiIiIiIiOShRFhERERHJQYmyiIiIiEgOSpRFRERERHJQoiwiIiIikoMSZRERERGRHJQoi4iIiIjkoERZRERERCQHJcoiIiIiIjkoURYRERERyUGJsoiIiIhIDkqURURERERyUKIsIiIiIpKDEmURERERkRy2iB2AiIiUnubNm7+zZs2adrHjqKioeLe6urp97DhEpDyZu8eOQURESoyZeV2uD1OmTKFz586sXbuWuXPn0rVrVwYOHMjUqVOpqqri9ddfp6qqiiZNmjB79myGDBnCqFGjuOyyy+oaB+5ujf17REQaQqUXIiLSYIsXL2by5Mm88sor7LHHHlRUVDB37lwqKyvp1KkTCxYsoE2bNjz++OP07NmTMWPG1DlJFhGJTSPKIiLyNXUdUS5CHBpRFpFoVKMsIiL1Nnr0aHr06MHKlSuZP38+vXr1orq6mpUrV9KtWzc++ugjlixZwvDhw5k5cyZt2rShS5cujB8/noqKCnbZZRdefvllhg0bFvtPERHZ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W2/NxIkT2WmnnaisrOTNN9/Ue1zi6ntOW7t2Lb179+aVV15h0KBBDb5mrVmzpt3GEtRRo0ZhZvTo0YO2bdvSpUsXli5dSpMmTejRowe33norZ511FlOnTmXfffela9euG92OmdU7Ga/ZJy1atGD27NlUVlZu9PM+ffp0tt9+e7p3756qc1p2rkAFdPTRRzNp0iQmT55Mhw4dWL58OcuXL6ddu3asWrWK/v37M2HCBJo0acI222xDv379mDZtGitWrOC9995TMrcR9d2vVVVVPPfcc7Rv35433nhD+7XE1ff93XXXXfnrX//K6tWr2XLLLRkxYkSmkmSo+z7p3LkzXbp0oV+/fjz22GOsWLGCysrK2OFLHSxevJjJkyezaNEievfuTUVFBXPnzqWyspJOnTqxYMEC2rRpw8SJE+nZsyf//Oc/mT9/PoccckgqkoZyVp9z2ooVK+jQoQMLFixg7dq1fPzxx3m9Zo0ePZoZM2aw66678tlnn/H555+zdOlSJk+ezJo1a3jzzTcZPXo0I0aMYP78+Xzzm9+kVatW3HDDDXmLAcI+6dChAy1atOC9997jscceY9q0aeywww60bduW7bbbjo8++oiWLVvy7rvvst9++zFt2jR69+6dms+7Si/Ws7HHCqNHj6ZHjx6sXLmS+fPn06tXL6qrq1m5ciXdunXjo48+YsmSJQwfPpyZM2fSpk0bKisrGTduHDvuuCMdO3akd+/em9puyTxiyLdNPappzH5t2bIlvXv3ZrfddtvYdjO7T0tNPo+bTp06cccdd9C+fftNvr/Jdkv6Pc61XxqyT7p06cL48eOpqKhgl112Yc8998y1rZLeF1kT4zOv97i48n389u7dm+XLlzNw4MBc29rke1uskoeGxtGQ/dKxY0fGjx/PmWfmbp9QSp93JcrrUa1l/mmfZp/e49zKtZ6vHKhGOftK6fg1M581axZvvPEGHTt2ZNmyZTRr1oyuXbtSWVnJwoULGTBgALNmzWLVqlW0bNmSfffdl8cee4xddtmFrl27bva/P/nkEwYMGFASCXuyrZL5vKtGeQOzZ8+u04fx/fffp2fPnsyfP59BgwaxevVqZs+evcn/btWqFePHj6dt27Z07NiRTz75hAMPzEw79I165JFHqKysrPN+PeKII3jkkUc48sgjN7svmzVrxpAhQ2jatOlXDngprvoc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WuvNZqLDFV0nvtcHFFsnvtdHGW3G3dfrevGJntfBVCdvUxtOpmdEslSZGeWh3HHHHZxxxhmMHj2a/v5+uru7WbJkCXfeeSdTp05l27ZtTJ06lT179tDX18dHPvIRfvzjH3PNNddwxBHpDz7w+W02ros33niDdevWccYZZyTWxfjx47nnnnt49dVXufjii+nr6+M973lPR/Xiq7R1MmbMGLq7u9myZQuXXHKJ6uSeexgxYgTHHXccjz/+OJdffnlbdeJTu/GpLIdr57OZPHky/f39fPSjH+XGG2/k61//ep7/pMK1WidHHHEE/f39vPnmm8yYMYOdO3cyYcIELrjAyxM6O9bqd98xxxzDPffcw3vf+95K9mexVp+TiRMn8pvf/Ibdu3czb968tp8Tn/oRX8riSznSqM2M8je+8Q3efPNN5s6dy969e1myZAnPPPMMRxxxBL29vdx000188pOfpL+/n56eHlavXs2nPvWp4e6Z+CbZrCw333wzvb297Nu3j40bNzJz5kwOHDjAvn37mDZtGi+++CJPPfUU11xzDStXruT4449n8uTJLFu2jCuvvDJVGYYqxwsvvMAPfvADjj32WEaPHs15553H5MmTm9ZHPCh8/vnnWbp0Kaeeemrqsvgiizq59957Oe6449i5cycf/nDzvWS+10eWbWbcuHHs2LGDF154YchnxN3X63aTdVlOO+00fvSjH/GFL3whdVmalaOd/mzSpEnMmjWLk09O/t7w/XmNdVont956K9OnT2f79u0AzJo1i3POOafZvbyuk+Ha8I033siBAwc488wzmTJlCocOHeKoo45KrJNLL72Uu+66i8mTJw/5nLj7Blkvaetj5cqVjBgxgvnz53P66ac3u1fq9ttOP9Ld3c1tt93Gpz/96dTl8KksvpQjjcoPlDup/GOPPZalS5cydmzyySRpv/DzUPQDOXHiRKZMmcKsWbNSlcUXWdbJ+PHj+c///E+uvvrqZvfyuj6Gek47GRAuWbKE559/niVLljS7r9ftxqeyJJWjkxeHnp4ejjrqKBYsWJCqHD7Juk4mTJhAT09P4mDZ9zrJug3H/fzUqVObPifuvsHVSxnPiC/9iE9l8aUcqa5T9YFyzvds+oW/bNkyuru72b59Oz09PWzdupWRI0cyZcoUuru72bRpE4sXL6avr4/du3ezdOlSRowYwd13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WxaVo5wy+FaeUDa++FInvpSjyLL4Uo5QPhtt5vO3HPpV/i9vQi9ERERERHzi/WY+EREREZEyaKAsIiIiIpJAA2URERERkQQaKIuIiIiIJNBAWUREREQkgQbKIiIiIiIJNFAWEREREUmggbKIiIiISAINlEVEREREEmigLCIiIiKSQANlEREREZEEGiiLiIiIiCTQQFlEREREJIEGyiIiIiIiCTRQFhERERFJoIGyiIiIiEgCDZRFRERERBJooCwiIiIikkADZRERERGRBBooi4iIiIgk0EBZRERERCSBBsoiIiIiIgk0UBYRERERSaCBsoiIiIhIAg2URUREREQSaKAsIiIiIpJAA2URERERkQQaKIuIiIiIJNBAWUREREQkgQbKIiIiIiIJNFAWEREREUmggbKIiIiISAINlEVEREREEmigLCIiIiKSQANlEREREZEEGiiLiIiIiCTQQFlEREREJIEGyiIiIiIiCTRQFhERERFJoIGyiIiIiEgCDZRFRERERBJooCwiIiIikkADZRERERGRBBooi4iIiIgk0EBZRERERCSBBsoiIiIiIgk0UBYRERERSaCBsoiIiIhIAg2URUREREQSaKAsIiIiIpJAA2URERERkQQaKIuIiIiIJNBAWUREREQkgQbKIiIiIiIJNFAWEREREUmggbKIiIiISIL/D+QtpTiqNVX/AAAAAElFTkSuQmCC\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"### Visualize decision-trees with graphviz","metadata":{}},{"cell_type":"code","source":"import graphviz as gv\nimport pylab\ndot_data = tree.export_graphviz(clf_gini, out_file=None, \n                              feature_names=X_train.columns,  \n                              class_names=y_train,  \n                              filled=True, rounded=True,  \n                              special_characters=True)\ngraph = gv.Graph(format='png')\ngraph = graphviz.Source(dot_data) \n\nfilename = graph.render(filename='img/g1')\npylab.savefig('filename.png')\ngraph","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **14. Decision Tree Classifier with criterion entropy** <a class=\"anchor\" id=\"14\"></a>\n\n[Table of Contents](#0.1)","metadata":{}},{"cell_type":"code","source":"# instantiate the DecisionTreeClassifier model with criterion entropy\n\nclf_en = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=0)\n\n\n# fit the model\nclf_en.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:06:44.070685Z","iopub.execute_input":"2024-09-04T16:06:44.071255Z","iopub.status.idle":"2024-09-04T16:06:44.086712Z","shell.execute_reply.started":"2024-09-04T16:06:44.071166Z","shell.execute_reply":"2024-09-04T16:06:44.085273Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=3,\n                       max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort=False,\n                       random_state=0, splitter='best')"},"metadata":{}}]},{"cell_type":"markdown","source":"### Predict the Test set results with criterion entropy","metadata":{}},{"cell_type":"code","source":"y_pred_en = clf_en.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:06:44.089931Z","iopub.execute_input":"2024-09-04T16:06:44.090424Z","iopub.status.idle":"2024-09-04T16:06:44.102780Z","shell.execute_reply.started":"2024-09-04T16:06:44.090331Z","shell.execute_reply":"2024-09-04T16:06:44.101689Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":"### Check accuracy score with criterion entropy","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\n\nprint('Model accuracy score with criterion entropy: {0:0.4f}'. format(accuracy_score(y_test, y_pred_en)))","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:06:44.104439Z","iopub.execute_input":"2024-09-04T16:06:44.104839Z","iopub.status.idle":"2024-09-04T16:06:44.121192Z","shell.execute_reply.started":"2024-09-04T16:06:44.104770Z","shell.execute_reply":"2024-09-04T16:06:44.120127Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"Model accuracy score with criterion entropy: 0.4000\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Compare the train-set and test-set accuracy\n\n\nNow, I will compare the train-set and test-set accuracy to check for overfitting.","metadata":{}},{"cell_type":"code","source":"y_pred_train_en = clf_en.predict(X_train)\n\ny_pred_train_en","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:06:44.122844Z","iopub.execute_input":"2024-09-04T16:06:44.123182Z","iopub.status.idle":"2024-09-04T16:06:44.142055Z","shell.execute_reply.started":"2024-09-04T16:06:44.123116Z","shell.execute_reply":"2024-09-04T16:06:44.140448Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"array(['drugX', 'drugX', 'drugX', 'DrugY', 'drugX', 'DrugY', 'DrugY',\n       'DrugY', 'DrugY', 'drugX', 'drugX', 'drugX', 'drugX', 'DrugY',\n       'drugX', 'drugX', 'DrugY', 'DrugY', 'drugX', 'DrugY', 'DrugY',\n       'DrugY', 'DrugY', 'DrugY', 'drugX', 'DrugY', 'drugX', 'DrugY',\n       'drugX', 'DrugY', 'drugX', 'drugX', 'drugX', 'DrugY', 'DrugY',\n       'drugX', 'DrugY', 'drugX', 'DrugY', 'drugX', 'DrugY', 'DrugY',\n       'DrugY', 'DrugY', 'DrugY', 'drugB', 'drugB', 'DrugY', 'DrugY',\n       'drugB', 'drugX', 'drugX', 'DrugY', 'DrugY', 'DrugY', 'DrugY',\n       'drugX', 'drugX', 'drugX', 'DrugY', 'DrugY', 'drugX', 'drugB',\n       'drugX', 'drugX', 'DrugY', 'DrugY', 'drugX', 'drugX', 'drugX',\n       'DrugY', 'DrugY', 'drugX', 'drugX', 'drugB', 'DrugY', 'drugB',\n       'drugX', 'drugB', 'drugX', 'DrugY', 'drugB', 'DrugY', 'DrugY',\n       'drugB', 'DrugY', 'drugB', 'DrugY', 'drugX', 'DrugY', 'drugX',\n       'DrugY', 'DrugY', 'drugX', 'drugX', 'DrugY', 'DrugY', 'drugX',\n       'drugB', 'DrugY', 'DrugY', 'drugX', 'DrugY', 'DrugY', 'drugB',\n       'DrugY', 'DrugY', 'DrugY', 'DrugY', 'drugB', 'drugB', 'drugX',\n       'drugX', 'DrugY', 'DrugY', 'DrugY', 'drugX', 'drugX', 'DrugY',\n       'DrugY', 'DrugY', 'DrugY', 'DrugY', 'DrugY', 'drugX', 'DrugY',\n       'DrugY', 'DrugY', 'DrugY', 'DrugY', 'drugX', 'DrugY', 'DrugY',\n       'DrugY', 'DrugY', 'DrugY', 'drugX', 'drugX', 'DrugY', 'DrugY',\n       'DrugY', 'drugX', 'DrugY', 'DrugY', 'DrugY', 'drugX', 'DrugY',\n       'drugX', 'DrugY', 'DrugY', 'DrugY', 'drugX', 'drugX', 'DrugY',\n       'DrugY', 'drugX', 'drugX', 'DrugY', 'drugX', 'DrugY'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train_en)))","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:06:44.146186Z","iopub.execute_input":"2024-09-04T16:06:44.146677Z","iopub.status.idle":"2024-09-04T16:06:44.156038Z","shell.execute_reply.started":"2024-09-04T16:06:44.146606Z","shell.execute_reply":"2024-09-04T16:06:44.154513Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"Training-set accuracy score: 0.5875\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Check for overfitting and underfitting","metadata":{}},{"cell_type":"code","source":"# print the scores on training and test set\n\nprint('Training set score: {:.4f}'.format(clf_en.score(X_train, y_train)))\n\nprint('Test set score: {:.4f}'.format(clf_en.score(X_test, y_test)))","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:06:44.157837Z","iopub.execute_input":"2024-09-04T16:06:44.158151Z","iopub.status.idle":"2024-09-04T16:06:44.175783Z","shell.execute_reply.started":"2024-09-04T16:06:44.158101Z","shell.execute_reply":"2024-09-04T16:06:44.174623Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"Training set score: 0.5875\nTest set score: 0.4000\n","output_type":"stream"}]},{"cell_type":"markdown","source":"We can see that the training-set score and test-set score is same as above. The training-set accuracy score is 0.7865 while the test-set accuracy to be 0.8021. These two values are quite comparable. So, there is no sign of overfitting. \n","metadata":{}},{"cell_type":"code","source":"print(confusion_matrix(y_test,y_pred_en))\nsns.heatmap(confusion_matrix(y_test,y_pred_en), annot=True, fmt='d', cmap='Greys', annot_kws={\"size\": 20})\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\nprint('\\n')\nprint(classification_report(y_test,y_pred_en))\nprint('\\n')","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:06:44.177806Z","iopub.execute_input":"2024-09-04T16:06:44.178149Z","iopub.status.idle":"2024-09-04T16:06:44.522740Z","shell.execute_reply.started":"2024-09-04T16:06:44.178086Z","shell.execute_reply":"2024-09-04T16:06:44.521472Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"[[5 0 3 0 7]\n [3 0 3 0 0]\n [1 0 2 0 0]\n [5 0 0 0 0]\n [2 0 0 0 9]]\n\n\n              precision    recall  f1-score   support\n\n       DrugY       0.31      0.33      0.32        15\n       drugA       0.00      0.00      0.00         6\n       drugB       0.25      0.67      0.36         3\n       drugC       0.00      0.00      0.00         5\n       drugX       0.56      0.82      0.67        11\n\n    accuracy                           0.40        40\n   macro avg       0.23      0.36      0.27        40\nweighted avg       0.29      0.40      0.33        40\n\n\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"### Visualize decision-trees","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(12,8))\n\nfrom sklearn import tree\n\ntree.plot_tree(clf_en.fit(X_train, y_train)) ","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:06:44.525306Z","iopub.execute_input":"2024-09-04T16:06:44.525968Z","iopub.status.idle":"2024-09-04T16:06:45.260398Z","shell.execute_reply.started":"2024-09-04T16:06:44.525876Z","shell.execute_reply":"2024-09-04T16:06:45.259325Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"[Text(334.8, 380.52, 'X[2] <= 2.5\\nentropy = 1.923\\nsamples = 160\\nvalue = [76, 17, 13, 11, 43]'),\n Text(167.4, 271.8, 'X[2] <= 1.5\\nentropy = 1.394\\nsamples = 98\\nvalue = [44, 0, 0, 11, 43]'),\n Text(83.7, 163.07999999999998, 'X[3] <= 1.5\\nentropy = 1.488\\nsamples = 47\\nvalue = [24, 0, 0, 11, 12]'),\n Text(41.85, 54.360000000000014, 'entropy = 0.994\\nsamples = 22\\nvalue = [10, 0, 0, 0, 12]'),\n Text(125.55000000000001, 54.360000000000014, 'entropy = 0.99\\nsamples = 25\\nvalue = [14, 0, 0, 11, 0]'),\n Text(251.10000000000002, 163.07999999999998, 'X[0] <= 33.5\\nentropy = 0.966\\nsamples = 51\\nvalue = [20, 0, 0, 0, 31]'),\n Text(209.25, 54.360000000000014, 'entropy = 0.898\\nsamples = 35\\nvalue = [11, 0, 0, 0, 24]'),\n Text(292.95, 54.360000000000014, 'entropy = 0.989\\nsamples = 16\\nvalue = [9, 0, 0, 0, 7]'),\n Text(502.20000000000005, 271.8, 'X[4] <= 120.0\\nentropy = 1.477\\nsamples = 62\\nvalue = [32, 17, 13, 0, 0]'),\n Text(418.5, 163.07999999999998, 'X[0] <= 32.5\\nentropy = 1.538\\nsamples = 49\\nvalue = [21, 17, 11, 0, 0]'),\n Text(376.65000000000003, 54.360000000000014, 'entropy = 1.392\\nsamples = 35\\nvalue = [17, 14, 4, 0, 0]'),\n Text(460.35, 54.360000000000014, 'entropy = 1.493\\nsamples = 14\\nvalue = [4, 3, 7, 0, 0]'),\n Text(585.9, 163.07999999999998, 'X[0] <= 45.5\\nentropy = 0.619\\nsamples = 13\\nvalue = [11, 0, 2, 0, 0]'),\n Text(544.0500000000001, 54.360000000000014, 'entropy = 0.0\\nsamples = 9\\nvalue = [9, 0, 0, 0, 0]'),\n Text(627.75, 54.360000000000014, 'entropy = 1.0\\nsamples = 4\\nvalue = [2, 0, 2, 0, 0]')]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x576 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"### Visualize decision-trees with graphviz","metadata":{}},{"cell_type":"code","source":"import graphviz\nfrom sklearn import tree\n\n# Assuming clf_en is your trained decision tree classifier\n# and X_train and y_train are your training data and labels\n\ndot_data = tree.export_graphviz(clf_en, out_file=None, \n                                feature_names=X_train.columns,  \n                                class_names=y_train.astype(str).unique(),  \n                                filled=True, rounded=True,  \n                                special_characters=True)\n\ngraph = graphviz.Source(dot_data)\ngraph.format = 'png'\ngraph.render('decision_tree_graph')  # This will save and open the PNG file\ngraph\nprint(\"Graph saved as 'decision_tree_graph.png'\")","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:06:45.262492Z","iopub.execute_input":"2024-09-04T16:06:45.262970Z","iopub.status.idle":"2024-09-04T16:06:45.658301Z","shell.execute_reply.started":"2024-09-04T16:06:45.262879Z","shell.execute_reply":"2024-09-04T16:06:45.656216Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"Graph saved as 'decision_tree_graph.png'\n","output_type":"stream"}]},{"cell_type":"code","source":"import graphviz \ndot_data = tree.export_graphviz(clf_en, out_file=None, \n                              feature_names=X_train.columns,  \n                              class_names=y_train,  \n                              filled=True, rounded=True,  \n                              special_characters=True)\n\ngraph = graphviz.Source(dot_data) \n\ngraph ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Now, based on the above analysis we can conclude that our classification model accuracy is very good. Our model is doing a very good job in terms of predicting the class labels.\n\n\nBut, it does not give the underlying distribution of values. Also, it does not tell anything about the type of errors our classifer is making. \n\n\nWe have another tool called `Confusion matrix` that comes to our rescue.","metadata":{}},{"cell_type":"markdown","source":"# **15. Confusion matrix** <a class=\"anchor\" id=\"15\"></a>\n\n[Table of Contents](#0.1)\n\n\nA confusion matrix is a tool for summarizing the performance of a classification algorithm. A confusion matrix will give us a clear picture of classification model performance and the types of errors produced by the model. It gives us a summary of correct and incorrect predictions broken down by each category. The summary is represented in a tabular form.\n\n\nFour types of outcomes are possible while evaluating a classification model performance. These four outcomes are described below:-\n\n\n**True Positives (TP)** – True Positives occur when we predict an observation belongs to a certain class and the observation actually belongs to that class.\n\n\n**True Negatives (TN)** – True Negatives occur when we predict an observation does not belong to a certain class and the observation actually does not belong to that class.\n\n\n**False Positives (FP)** – False Positives occur when we predict an observation belongs to a    certain class but the observation actually does not belong to that class. This type of error is called **Type I error.**\n\n\n\n**False Negatives (FN)** – False Negatives occur when we predict an observation does not belong to a certain class but the observation actually belongs to that class. This is a very serious error and it is called **Type II error.**\n\n\n\nThese four outcomes are summarized in a confusion matrix given below.\n","metadata":{}},{"cell_type":"code","source":"# Print the Confusion Matrix and slice it into four pieces\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, y_pred_en)\n\nprint('Confusion matrix\\n\\n', cm)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T16:07:06.958825Z","iopub.execute_input":"2024-09-04T16:07:06.959202Z","iopub.status.idle":"2024-09-04T16:07:06.969416Z","shell.execute_reply.started":"2024-09-04T16:07:06.959149Z","shell.execute_reply":"2024-09-04T16:07:06.968233Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"Confusion matrix\n\n [[5 0 3 0 7]\n [3 0 3 0 0]\n [1 0 2 0 0]\n [5 0 0 0 0]\n [2 0 0 0 9]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **16. Classification Report** <a class=\"anchor\" id=\"16\"></a>\n\n[Table of Contents](#0.1)\n\n\n**Classification report** is another way to evaluate the classification model performance. It displays the  **precision**, **recall**, **f1** and **support** scores for the model. I have described these terms in later.\n\nWe can print a classification report as follows:-","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_pred_en))","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-09-04T16:07:10.858197Z","iopub.execute_input":"2024-09-04T16:07:10.858583Z","iopub.status.idle":"2024-09-04T16:07:10.874013Z","shell.execute_reply.started":"2024-09-04T16:07:10.858510Z","shell.execute_reply":"2024-09-04T16:07:10.873022Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n       DrugY       0.31      0.33      0.32        15\n       drugA       0.00      0.00      0.00         6\n       drugB       0.25      0.67      0.36         3\n       drugC       0.00      0.00      0.00         5\n       drugX       0.56      0.82      0.67        11\n\n    accuracy                           0.40        40\n   macro avg       0.23      0.36      0.27        40\nweighted avg       0.29      0.40      0.33        40\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **17. Results and conclusion** <a class=\"anchor\" id=\"17\"></a>\n\n[Table of Contents](#0.1)\n\n\n1.\tIn this project, I build a Decision-Tree Classifier model to predict the safety of the car. I build two models, one with criterion `gini index` and another one with criterion `entropy`. The model yields a very good performance as indicated by the model accuracy in both the cases which was found to be 0.8021.\n2.\tIn the model with criterion `gini index`, the training-set accuracy score is 0.7865 while the test-set accuracy to be 0.8021. These two values are quite comparable. So, there is no sign of overfitting.\n3.\tSimilarly, in the model with criterion `entropy`, the training-set accuracy score is 0.7865 while the test-set accuracy to be 0.8021.We get the same values as in the case with criterion `gini`. So, there is no sign of overfitting.\n4.\tIn both the cases, the training-set and test-set accuracy score is the same. It may happen because of small dataset.\n5.\tThe confusion matrix and classification report yields very good model performance.","metadata":{}},{"cell_type":"markdown","source":"# **18. References** <a class=\"anchor\" id=\"18\"></a>\n\n[Table of Contents](#0.1)\n\n\nThe work done in this project is inspired from following books and websites:-\n\n1. Hands on Machine Learning with Scikit-Learn and Tensorflow by Aurélién Géron\n\n2. Introduction to Machine Learning with Python by Andreas C. Müller and Sarah Guido\n\n3. https://en.wikipedia.org/wiki/Decision_tree\n\n4. https://en.wikipedia.org/wiki/Information_gain_in_decision_trees\n\n5. https://en.wikipedia.org/wiki/Entropy_(information_theory)\n\n6. https://www.datacamp.com/community/tutorials/decision-tree-classification-python\n\n7. https://stackabuse.com/decision-trees-in-python-with-scikit-learn/\n\n8. https://acadgild.com/blog/decision-tree-python-code\n","metadata":{}},{"cell_type":"markdown","source":"So, now we will come to the end of this kernel.\n\nI hope you find this kernel useful and enjoyable.\n\t\nYour comments and feedback are most welcome.\n\nThank you\n","metadata":{}},{"cell_type":"markdown","source":"[Go to Top](#0)","metadata":{}}]}